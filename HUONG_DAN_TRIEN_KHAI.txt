=================================================================
HƯỚNG DẪN TRIỂN KHAI TERRAFORM CHO DỰ ÁN MAPAPP-DEVSECOPS
=================================================================

*** REGION: US-EAST-1 (N. VIRGINIA) ***
Project đã được cấu hình để sử dụng region us-east-1

*** QUAN TRỌNG VỀ BẢO MẬT KEY-PAIR VÀ SECRETS ***

KHI TRIỂN KHAI TERRAFORM NÀY:
1. Key-pair được tạo cho EKS nodes chỉ sử dụng PUBLIC KEY
2. Private key KHÔNG được tạo bởi Terraform, phải tự tạo và quản lý
3. Database passwords KHÔNG được hardcode, sử dụng AWS Secrets Manager
4. Không có secret keys nào được lưu trong code hoặc state file

I. CHUẨN BỊ BAN ĐẦU
===================

1. Yêu cầu hệ thống:
   - AWS CLI đã cài đặt và cấu hình
   - Terraform >= 1.0 đã cài đặt
   - kubectl đã cài đặt
   - Git đã cài đặt
   - OpenSSH client (cho Windows)

   **Cài đặt OpenSSH trên Windows (nếu chưa có):**
   
   **Phương pháp 1 - Windows 10/11 (PowerShell với quyền Admin):**
   Add-WindowsCapability -Online -Name OpenSSH.Client~~~~0.0.1.0
   
   **Phương pháp 2 - Sử dụng Chocolatey:**
   choco install openssh
   
   **Phương pháp 3 - Kiểm tra đã có ssh chưa:**
   ssh -V
   # Nếu có kết quả như "OpenSSH_for_Windows_8.1p1" là đã có SSH

2. Cấu hình AWS CLI:
   aws configure
   # Nhập AWS Access Key ID
   # Nhập AWS Secret Access Key
   # Region: us-east-1
   # Output format: json

3. Kiểm tra kết nối AWS và region:
   
   **CÁCH NHANH - Sử dụng script kiểm tra:**
   cd C:\DevOps\DoAn\devsecops-maps-webapp\mapapp-devsecops\terraform
   .\check-aws-access.ps1
   
   **CÁCH THỦ CÔNG:**
   aws sts get-caller-identity
   aws configure get region
   # Đảm bảo region là us-east-1
   
   Kết quả mong đợi:
   {
       "UserId": "AIDACKCEVSQ6C2EXAMPLE",
       "Account": "123456789012",
       "Arn": "arn:aws:iam::123456789012:user/your-username"
   }

4. **QUAN TRỌNG - TẠO VÀ QUẢN LÝ SSH KEY-PAIR AN TOÀN:**
   
   a) Tạo thư mục lưu key (Windows):
      **PowerShell:**
      New-Item -ItemType Directory -Force -Path "C:\DevOps\DoAn\Key"
      
      **CMD:**
      mkdir "C:\DevOps\DoAn\Key" 2>nul
   
   b) Tạo SSH key pair mới (THỦ CÔNG):
      **Linux/Mac:**
      ssh-keygen -t rsa -b 4096 -f ~/.ssh/mapapp-key-dev
      ssh-keygen -t rsa -b 4096 -f ~/.ssh/mapapp-key-prod
      
      **Windows PowerShell:**
      ssh-keygen -t rsa -b 4096 -f "C:\DevOps\DoAn\Key\mapapp-key-dev"
      ssh-keygen -t rsa -b 4096 -f "C:\DevOps\DoAn\Key\mapapp-key-prod"
      
      **Windows CMD:**
      ssh-keygen -t rsa -b 4096 -f "C:\DevOps\DoAn\Key\mapapp-key-dev"
      ssh-keygen -t rsa -b 4096 -f "C:\DevOps\DoAn\Key\mapapp-key-prod"
      
   c) Xem public key:
      **Linux/Mac:**
      cat ~/.ssh/mapapp-key-dev.pub
      cat ~/.ssh/mapapp-key-prod.pub
      
      **Windows PowerShell:**
      Get-Content "C:\DevOps\DoAn\Key\mapapp-key-dev.pub"
      Get-Content "C:\DevOps\DoAn\Key\mapapp-key-prod.pub"
      
      **Windows CMD:**
      type "C:\DevOps\DoAn\Key\mapapp-key-dev.pub"
      type "C:\DevOps\DoAn\Key\mapapp-key-prod.pub"
      
   d) Copy nội dung public key để dán vào terraform.tfvars
   
   e) **Đặt quyền bảo mật cho private key (Windows):**
      **PowerShell (chạy với quyền Administrator):**
      # Chỉ cho phép user hiện tại truy cập private key
      icacls "C:\DevOps\DoAn\Key\mapapp-key-dev" /inheritance:r /grant:r "%USERNAME%:F"
      icacls "C:\DevOps\DoAn\Key\mapapp-key-prod" /inheritance:r /grant:r "%USERNAME%:F"
   
   **CỰC KỲ QUAN TRỌNG:** 
   - Private key (~/.ssh/mapapp-key-*) là BÍ MẬT TUYỆT ĐỐI
   - KHÔNG BAO GIỜ commit private key vào Git
   - KHÔNG chia sẻ private key qua email/slack
   - Lưu private key ở nơi an toàn, có backup
   - Chỉ public key được sử dụng trong Terraform
   - Terraform chỉ tạo AWS Key Pair resource từ public key
   - Các EKS nodes sẽ sử dụng key này để SSH (nếu cần)

5. **QUAN TRỌNG - QUẢN LÝ DATABASE SECRETS AN TOÀN:**

   Database passwords KHÔNG được hardcode trong code. Sử dụng AWS Secrets Manager:
   
   **TRƯỚC TIÊN - Kiểm tra quyền AWS:**
   aws sts get-caller-identity
   # Đảm bảo user có quyền tạo secrets   a) **Tạo secret cho DEV environment:**
      
      **CMD (khuyến nghị):**
      aws secretsmanager create-secret --name "mapapp/dev/db-credentials" --description "Database credentials for MapApp DEV" --secret-string "{\"mysql_username\": \"admin\", \"mysql_password\": \"Dev-SecurePass-2025!\", \"docdb_username\": \"admin\", \"docdb_password\": \"Dev-DocDB-SecurePass-2025!\"}" --region us-east-1
      
      **PowerShell (nếu CMD không work):**
      aws secretsmanager create-secret --name 'mapapp/dev/db-credentials' --description 'Database credentials for MapApp DEV' --secret-string '{\"mysql_username\": \"admin\", \"mysql_password\": \"Dev-SecurePass-2025!\", \"docdb_username\": \"admin\", \"docdb_password\": \"Dev-DocDB-SecurePass-2025!\"}' --region us-east-1
      
      # Xóa file sau khi tạo (bảo mật):
      Remove-Item "secret-dev.json"   b) **Tạo secret cho PROD environment:**
      
      **CMD (khuyến nghị):**
      aws secretsmanager create-secret --name "mapapp/prod/db-credentials" --description "Database credentials for MapApp PROD" --secret-string "{\"mysql_username\": \"admin\", \"mysql_password\": \"Prod-Ultra-SecurePass-2025!@#\", \"docdb_username\": \"admin\", \"docdb_password\": \"Prod-DocDB-Ultra-SecurePass-2025!@#\"}" --region us-east-1
      
      **PowerShell (nếu CMD không work):**
      aws secretsmanager create-secret --name 'mapapp/prod/db-credentials' --description 'Database credentials for MapApp PROD' --secret-string '{\"mysql_username\": \"admin\", \"mysql_password\": \"Prod-Ultra-SecurePass-2025!@#\", \"docdb_username\": \"admin\", \"docdb_password\": \"Prod-DocDB-Ultra-SecurePass-2025!@#\"}' --region us-east-1
     c) **Kiểm tra secrets đã tạo:**
      aws secretsmanager list-secrets --region us-east-1 --query "SecretList[?contains(Name, 'mapapp')]"
   
   d) **Nếu gặp lỗi quyền (AccessDeniedException):**
      
      **Lỗi thường gặp:**
      - "User is not authorized to perform: secretsmanager:CreateSecret"
      - "explicit deny in a service control policy"
      
      **Cách khắc phục:**
      1) Liên hệ AWS Admin để cấp quyền SecretsManager
      2) Hoặc tạo secrets thông qua AWS Console:
         - Vào AWS Console -> Secrets Manager
         - Click "Store a new secret"
         - Chọn "Other type of secret"
         - Nhập key-value pairs như trên
         - Đặt tên: mapapp/dev/db-credentials hoặc mapapp/prod/db-credentials
      
      3) **Cách tạm thời (KHÔNG khuyến nghị cho production):**
         Nếu không thể tạo secrets, có thể tạm thời dùng environment variables:
         
         **PowerShell:**
         $env:TF_VAR_mysql_password="Dev-SecurePass-2025!"
         $env:TF_VAR_docdb_password="Dev-DocDB-SecurePass-2025!"
           Nhưng cần sửa module databases để sử dụng var thay vì data source.   c) Kiểm tra secrets đã tạo:
      aws secretsmanager list-secrets --query "SecretList[?contains(Name, 'mapapp')]"

**HƯỚNG DẪN TẠO SECRETS QUA AWS CONSOLE (NẾU GẶP LỖI QUYỀN):**

1. **Truy cập AWS Console:**
   - Đăng nhập vào https://console.aws.amazon.com
   - Chuyển đến region us-east-1 (N. Virginia)
   - Tìm kiếm "Secrets Manager"

2. **Tạo Secret cho DEV:**
   - Click "Store a new secret"
   - Chọn "Other type of secret"
   - Chọn "Plaintext" tab
   - Paste nội dung JSON:
   ```json
   {
     "mysql_username": "admin",
     "mysql_password": "Dev-SecurePass-2025!",
     "docdb_username": "admin",
     "docdb_password": "Dev-DocDB-SecurePass-2025!"
   }
   ```
   - Click "Next"
   - Secret name: `mapapp/dev/db-credentials`
   - Description: `Database credentials for MapApp DEV`
   - Click "Next" -> "Next" -> "Store"

3. **Tạo Secret cho PROD:**
   - Lặp lại các bước trên với:
   - Secret name: `mapapp/prod/db-credentials`
   - Description: `Database credentials for MapApp PROD`
   - JSON content:
   ```json
   {
     "mysql_username": "admin",
     "mysql_password": "Prod-Ultra-SecurePass-2025!@#",
     "docdb_username": "admin",
     "docdb_password": "Prod-DocDB-Ultra-SecurePass-2025!@#"
   }
   ```

4. **Xác nhận secrets đã tạo:**
   - Trong Secrets Manager, bạn sẽ thấy 2 secrets:
     - mapapp/dev/db-credentials
     - mapapp/prod/db-credentials

**CÁCH DỄ NHẤT - SỬ DỤNG SCRIPT POWERSHELL:**

Tôi đã tạo sẵn script PowerShell để tự động tạo secrets. Chạy lệnh:

```powershell
# Di chuyển đến thư mục terraform
cd C:\DevOps\DoAn\devsecops-maps-webapp\mapapp-devsecops\terraform

# Chạy script tạo secrets
.\create-secrets.ps1
```

Script này sẽ:
- Kiểm tra AWS CLI
- Tạo secrets cho cả DEV và PROD
- Xử lý lỗi và đưa ra hướng dẫn khắc phục
- Tự động xóa file tạm thời (bảo mật)

II. THIẾT LẬP BACKEND TERRAFORM (BƯỚC QUAN TRỌNG NHẤT)
======================================================

1. Tạo S3 Bucket cho Terraform State:
   
   **CMD:**
   aws s3api create-bucket --bucket mapapp-terraform-state-storage --region us-east-1
   
   **PowerShell:**
   aws s3api create-bucket --bucket mapapp-terraform-state-storage --region us-east-1

   Kết quả mong đợi:
   {
       "Location": "http://mapapp-terraform-state-storage.s3.amazonaws.com/"
   }

2. Bật versioning cho S3 bucket:
   
   **CMD:**
   aws s3api put-bucket-versioning --bucket mapapp-terraform-state-storage --versioning-configuration Status=Enabled
   
   **PowerShell:**
   aws s3api put-bucket-versioning --bucket mapapp-terraform-state-storage --versioning-configuration Status=Enabled

3. Bật mã hóa cho S3 bucket:
   
   **CMD:**
   aws s3api put-bucket-encryption --bucket mapapp-terraform-state-storage --server-side-encryption-configuration "{\"Rules\":[{\"ApplyServerSideEncryptionByDefault\":{\"SSEAlgorithm\":\"AES256\"}}]}"
   
   **PowerShell:**
   aws s3api put-bucket-encryption --bucket mapapp-terraform-state-storage --server-side-encryption-configuration '{\"Rules\":[{\"ApplyServerSideEncryptionByDefault\":{\"SSEAlgorithm\":\"AES256\"}}]}'

4. Tạo DynamoDB table cho Terraform locking:
   
   **CMD:**
   aws dynamodb create-table --table-name mapapp-terraform-state-lock --attribute-definitions AttributeName=LockID,AttributeType=S --key-schema AttributeName=LockID,KeyType=HASH --billing-mode PAY_PER_REQUEST
   
   **PowerShell:**
   aws dynamodb create-table --table-name mapapp-terraform-state-lock --attribute-definitions AttributeName=LockID,AttributeType=S --key-schema AttributeName=LockID,KeyType=HASH --billing-mode PAY_PER_REQUEST

   Kết quả mong đợi:
   {
       "TableDescription": {
           "TableName": "mapapp-terraform-state-lock",
           "TableStatus": "CREATING",
           ...
       }
   }

5. Kiểm tra DynamoDB table đã sẵn sàng:
   
   **CMD/PowerShell:**
   aws dynamodb describe-table --table-name mapapp-terraform-state-lock
   
   Đợi cho đến khi TableStatus: "ACTIVE"

III. TRIỂN KHAI MÔI TRƯỜNG DEV
==============================

1. Di chuyển vào thư mục môi trường Dev:
   cd environments/dev

2. Khởi tạo Terraform (lần đầu tiên):
   terraform init -backend-config="key=dev/terraform.tfstate"

   Kết quả mong đợi:
   Initializing the backend...
   Initializing provider plugins...
   ...
   Terraform has been successfully initialized!

3. Xem kế hoạch triển khai:
   terraform plan -var-file="terraform.tfvars"

   Kết quả mong đợi sẽ hiển thị:
   Plan: XX to add, 0 to change, 0 to destroy.

4. Áp dụng cấu hình (CẨN THẬN - BƯỚC NÀY TẠO TÀI NGUYÊN AWS):
   terraform apply -var-file="terraform.tfvars"

   Nhập "yes" để xác nhận khi được hỏi.

   Quá trình này mất khoảng 15-20 phút.

5. Kiểm tra kết quả triển khai:

   a) Kiểm tra VPC:
      aws ec2 describe-vpcs --filters "Name=tag:Name,Values=mapapp-dev-vpc"
      
      Kết quả mong đợi: 1 VPC với CIDR 10.0.0.0/16   b) Kiểm tra EKS Cluster:
      **CMD/PowerShell:**
      aws eks describe-cluster --name mapapp-dev-eks --region us-east-1
      
      Kết quả mong đợi: Status "ACTIVE"

   c) Kiểm tra Node Group:
      **CMD/PowerShell:**
      aws eks describe-nodegroup --cluster-name mapapp-dev-eks --nodegroup-name mapapp-dev-nodes --region us-east-1
      
      Kết quả mong đợi: Status "ACTIVE", DesiredSize: 2

   d) Kiểm tra RDS MySQL:
      **CMD/PowerShell:**
      aws rds describe-db-instances --db-instance-identifier mapapp-dev-mysql --region us-east-1
      
      Kết quả mong đợi: DBInstanceStatus "available"

   e) Kiểm tra DocumentDB:
      aws docdb describe-db-clusters --db-cluster-identifier mapapp-dev-docdb
      
      Kết quả mong đợi: Status "available"

   f) Kiểm tra ElastiCache Redis:
      aws elasticache describe-cache-clusters --cache-cluster-id mapapp-dev-redis
      
      Kết quả mong đợi: CacheClusterStatus "available"

6. Cấu hình kubectl cho EKS:
   **CMD/PowerShell:**
   aws eks update-kubeconfig --region us-east-1 --name mapapp-dev-eks

7. Kiểm tra kết nối Kubernetes:
   **CMD/PowerShell:**
   kubectl get nodesKết quả mong đợi:
   NAME                                         STATUS   ROLES    AGE   VERSION
   ip-10-0-101-xxx.us-east-1.compute...   Ready    <none>   5m    v1.30.x
   ip-10-0-102-xxx.us-east-1.compute...   Ready    <none>   5m    v1.30.x

8. Kiểm tra pods hệ thống:
   kubectl get pods -n kube-system

   Kết quả mong đợi: Tất cả pods trong trạng thái Running

IV. XỬ LÝ LỖI THƯỜNG GẶP
========================

1. Lỗi "bucket already exists":
   - Thay đổi tên bucket trong file backend.tf thành tên duy nhất
   - Ví dụ: mapapp-terraform-state-storage-<your-initials>-<random-number>

2. Lỗi "InvalidUserID.NotFound":
   - Kiểm tra AWS credentials đã đúng chưa
   - Chạy: aws sts get-caller-identity

3. Lỗi "terraform init" thất bại:
   - Xóa thư mục .terraform và chạy lại terraform init

4. Lỗi "EKS cluster creation timeout":
   - Đây là bình thường, EKS cần 10-15 phút để tạo
   - Kiểm tra trên AWS Console để theo dõi tiến trình

5. Lỗi "Node group not ready":
   - Đợi thêm 5-10 phút sau khi cluster ready
   - Kiểm tra IAM roles đã được tạo đúng chưa

V. TRIỂN KHAI MÔI TRƯỜNG PROD (SAU KHI DEV HOÀN THÀNH)
======================================================

1. Di chuyển vào thư mục Prod:
   cd ../prod

2. Khởi tạo Terraform cho Prod:
   terraform init -backend-config="key=prod/terraform.tfstate"

3. Xem kế hoạch:
   terraform plan -var-file="terraform.tfvars"

4. Áp dụng (CẨN THẬN - CHI PHÍ CAO HỚN):
   terraform apply -var-file="terraform.tfvars"

VI. KIỂM TRA TỔNG THỂ SAU KHI HOÀN THÀNH
========================================

1. Kiểm tra tất cả tài nguyên đã được tạo:
   
   Dev Environment:
   - VPC: mapapp-dev-vpc (10.0.0.0/16)
   - EKS: mapapp-dev-eks (2 nodes t3.medium)
   - RDS: mapapp-dev-mysql (single AZ)
   - DocumentDB: mapapp-dev-docdb (1 instance)
   - Redis: mapapp-dev-redis (1 node)
   - EFS: mapapp-dev-efs
   - Key Pair: mapapp-dev-eks-key

   Prod Environment (nếu triển khai):
   - VPC: mapapp-prod-vpc (10.1.0.0/16)
   - EKS: mapapp-prod-eks (3 nodes t3.large)
   - RDS: mapapp-prod-mysql (Multi-AZ)
   - DocumentDB: mapapp-prod-docdb (2 instances)
   - Redis: mapapp-prod-redis (with replica)
   - EFS: mapapp-prod-efs
   - Key Pair: mapapp-prod-eks-key

2. Kiểm tra chi phí AWS:
   aws ce get-cost-and-usage \
     --time-period Start=2025-06-01,End=2025-06-16 \
     --granularity DAILY \
     --metrics BlendedCost

VII. DỌN DẸP (KHI KHÔNG CẦN THIẾT)
==================================

1. Xóa môi trường Dev:
   cd environments/dev
   terraform destroy -var-file="terraform.tfvars"

2. Xóa môi trường Prod:
   cd environments/prod
   terraform destroy -var-file="terraform.tfvars"

3. Xóa S3 bucket và DynamoDB table:
   aws s3 rb s3://mapapp-terraform-state-storage --force
   aws dynamodb delete-table --table-name mapapp-terraform-state-lock

VIII. GIẢI THÍCH CHI TIẾT VỀ KEY-PAIR VÀ SECRETS
==============================================

** CÂU HỎI THƯỜNG GẶP: Key-pair và Secrets được lưu ở đâu? **

1. **SSH KEY-PAIR:**
   a) Private Key:
      - Được lưu trên máy local của bạn (ví dụ: ~/.ssh/mapapp-key-dev)
      - KHÔNG được Terraform tạo ra hay quản lý
      - KHÔNG được lưu trong AWS hoặc code repository
      - Bạn hoàn toàn chịu trách nhiệm bảo vệ private key này
   
   b) Public Key:
      - Được đưa vào terraform.tfvars
      - Terraform sử dụng để tạo AWS Key Pair resource
      - Được lưu trong AWS EC2 Key Pairs
      - EKS nodes sử dụng key này để SSH access
   
   c) Terraform chỉ tạo:
      - AWS Key Pair resource (aws_key_pair)
      - Resource này chỉ chứa public key và metadata
      - KHÔNG tạo ra private key mới

2. **DATABASE SECRETS:**
   a) Passwords được lưu trong:
      - AWS Secrets Manager (service được mã hóa)
      - Mã hóa tự động bởi AWS KMS
      - Truy cập controlled bởi IAM policies
   
   b) Terraform:
      - Sử dụng data source để ĐỌC secrets từ Secrets Manager
      - KHÔNG tạo ra passwords mới
      - KHÔNG lưu passwords trong state file
   
   c) Security benefits:
      - Passwords được rotate dễ dàng
      - Audit trail đầy đủ
      - Không có hardcode passwords trong code

3. **TERRAFORM STATE FILE:**
   - KHÔNG chứa private keys
   - KHÔNG chứa plaintext passwords
   - Chỉ chứa resource IDs và public information
   - Vẫn cần được bảo vệ (lưu trong S3 encrypted)

4. **QUY TRÌNH BẢO MẬT:**
   a) Trước khi chạy Terraform:
      - Tạo SSH key-pair thủ công
      - Tạo database secrets trong AWS Secrets Manager
   
   b) Khi chạy Terraform:
      - Terraform đọc public key từ terraform.tfvars
      - Terraform đọc passwords từ Secrets Manager
      - Tạo resources với thông tin này
   
   c) Sau khi triển khai:
      - Private key vẫn ở máy local của bạn
      - Passwords vẫn ở Secrets Manager
      - Có thể SSH vào nodes bằng private key
      - Ứng dụng có thể đọc DB passwords từ Secrets Manager

5. **CÁCH TRUY CẬP:**
   a) SSH vào EKS nodes:
      **Linux/Mac:**
      ssh -i ~/.ssh/mapapp-key-dev ec2-user@<node-ip>
      
      **Windows PowerShell/CMD:**
      ssh -i "C:\DevOps\DoAn\Key\mapapp-key-dev" ec2-user@<node-ip>
   
   b) Get database passwords:
      **Linux/Mac/Windows PowerShell/CMD:**
      aws secretsmanager get-secret-value \
        --secret-id mapapp/dev/db-credentials \
        --query SecretString --output text | jq .

IX. LIÊN HỆ VÀ HỖ TRỢ
=======================

Nếu gặp vấn đề trong quá trình triển khai:
1. Kiểm tra log chi tiết từ terraform apply
2. Kiểm tra AWS CloudTrail để xem lỗi API
3. Sử dụng terraform state list để xem tài nguyên đã tạo
4. Sử dụng terraform state show <resource> để xem chi tiết resource

CHÚ Ý QUAN TRỌNG:
- Luôn chạy terraform plan trước khi apply
- Backup terraform.tfstate thường xuyên
- Theo dõi chi phí AWS định kỳ
- Không commit AWS credentials vào Git
- Sử dụng môi trường Dev để test trước khi lên Prod

=================================================================
QUAN TRỌNG - HƯỚNG DẪN HỦY MÔI TRƯỜNG (TERRAFORM DESTROY)
=================================================================

*** CẢNH BÁO: ĐỌC KỸ TRƯỚC KHI CHẠY TERRAFORM DESTROY ***

**BƯỚC QUAN TRỌNG - PHẢI LÀM TRƯỚC KHI TERRAFORM DESTROY:**

1. **Dọn dẹp Kubernetes workloads (nếu có deploy ứng dụng):**
   
   a) Kiểm tra các Load Balancers được tạo bởi Kubernetes:
      kubectl get svc --all-namespaces -o wide
      # Tìm các service có type=LoadBalancer
   
   b) Xóa các Load Balancer services:
      kubectl delete svc <service-name> -n <namespace>
      # Hoặc xóa toàn bộ namespace nếu có:
      kubectl delete namespace <your-app-namespace>
   
   c) Kiểm tra và xóa ArgoCD (nếu có cài đặt):
      # Lấy password ArgoCD admin
      kubectl -n argo get secret argocd-initial-admin-secret -o jsonpath="{.data.password}" | base64 -d
      
      # Port forward để truy cập ArgoCD UI
      kubectl port-forward svc/argocd-server 30081:80 -n argo
      
      # Xóa ArgoCD apps trước
      helm uninstall argocd-apps -n argo
      
      # Xóa ArgoCD
      kubectl delete namespace argo

2. **LƯU Ý QUAN TRỌNG - Xóa Target Groups và Load Balancers thủ công:**
   
   a) Liệt kê Target Groups:
      aws elbv2 describe-target-groups --query 'TargetGroups[?contains(TargetGroupName,`mapapp`)]'
   
   b) Xóa Target Groups (nếu có):
      aws elbv2 delete-target-group --target-group-arn <target-group-arn>
   
   c) Liệt kê Load Balancers:
      aws elbv2 describe-load-balancers --query 'LoadBalancers[?contains(LoadBalancerName,`mapapp`)]'
   
   d) Xóa Load Balancers (nếu có):
      aws elbv2 delete-load-balancer --load-balancer-arn <load-balancer-arn>

3. **Kiểm tra và xóa PersistentVolumes:**
   
   a) Liệt kê PVs:
      kubectl get pv
   
   b) Xóa PVCs trước:
      kubectl delete pvc --all --all-namespaces
   
   c) Đợi PVs tự động xóa hoặc xóa thủ công:
      kubectl delete pv <pv-name>

**THỰC HIỆN TERRAFORM DESTROY:**

4. **Xóa môi trường Dev:**
   cd environments/dev
   
   # Kiểm tra trước khi xóa
   terraform plan -destroy -var-file="terraform.tfvars"
   
   # Xóa (thêm -auto-approve nếu chắc chắn)
   terraform destroy -var-file="terraform.tfvars"

5. **Xóa môi trường Prod:**
   cd environments/prod
   
   # Kiểm tra trước khi xóa
   terraform plan -destroy -var-file="terraform.tfvars"
   
   # Xóa (thêm -auto-approve nếu chắc chắn)
   terraform destroy -var-file="terraform.tfvars"

**CÁC LỖI THƯỜNG GẶP KHI DESTROY:**

6. **Nếu gặp lỗi "resource still has dependencies":**
   
   a) Xóa từng resource cụ thể:
      terraform destroy -target=module.databases -var-file="terraform.tfvars"
      terraform destroy -target=module.eks -var-file="terraform.tfvars"
      terraform destroy -target=module.vpc -var-file="terraform.tfvars"
   
   b) Chờ một chút giữa các lần destroy để AWS xử lý

7. **Nếu Load Balancer không tự xóa:**
   
   # Vào AWS Console -> EC2 -> Load Balancers -> Xóa thủ công
   # Hoặc dùng CLI như bước 2 ở trên

8. **Nếu Security Group không xóa được:**
   
   # Xóa tất cả inbound/outbound rules trước
   aws ec2 revoke-security-group-ingress --group-id <sg-id> --ip-permissions file://revoke-rules.json

**SAU KHI TERRAFORM DESTROY HOÀN THÀNH:**

9. **Xóa S3 bucket và DynamoDB table (nếu không cần lưu state):**
   
   # Xóa tất cả objects trong S3 bucket trước
   aws s3 rm s3://mapapp-terraform-state-storage --recursive
   
   # Xóa S3 bucket
   aws s3 rb s3://mapapp-terraform-state-storage --force
   
   # Xóa DynamoDB table
   aws dynamodb delete-table --table-name mapapp-terraform-state-lock

10. **Kiểm tra tài nguyên còn sót lại:**
    
    a) Kiểm tra EBS volumes:
       aws ec2 describe-volumes --filters "Name=tag:Name,Values=*mapapp*" --query 'Volumes[*].[VolumeId,State,Tags]'
    
    b) Kiểm tra Elastic IPs:
       aws ec2 describe-addresses --query 'Addresses[?contains(to_string(Tags),`mapapp`)]'
    
    c) Kiểm tra Network Interfaces:
       aws ec2 describe-network-interfaces --filters "Name=description,Values=*mapapp*" --query 'NetworkInterfaces[*].[NetworkInterfaceId,Status]'

=================================================================
KẾT THÚC HƯỚNG DẪN
=================================================================
